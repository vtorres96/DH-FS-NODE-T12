Instalar sequelize e sequelize-cli (o sequelize-cli deve ser instalado como dependencia de desenvolvimento)

yarn add sequelize
yarn add sequelize-cli -D devDependencies


Criar pasta config com arquivo  database.js para fazer a conexao com o banco de dados

const config = {
  username: 'root',
  password: '',
  database: 'dh_fs_node10',
  host: 'localhost',
  dialect: 'mysql' 
}

module.exports = config;


Criar pasta database e dentro dela criar pasta migrations

Criar arquivo .sequelizerc e colocar os caminhos da pasta migrations e de config/database.js

const path = require('path');

module.exports = {
  config: path.resolve('src', 'config', 'database.js'),
  'migrations-path': path.resolve('src', 'database', 'migrations'),
  'seeders-path': path.resolve('src', 'database', 'seeders'),
  'models-path': path.resolve('src', 'models')
}


Criar migration para futuramente essa migration se tornar uma tabela no banco de dados
yarn sequelize migration:generate --name create_users_table
npx sequelize migration:generate --name create_users_table

Executar a migration para criar a tabela users no banco de dados
Antes se der erro terá que instalar o pacote mysql2 com o comando: yarn add mysql2
yarn sequelize db:migrate
npx sequelize db:migrate

Criar pasta de models com comando 
yarn sequelize init:models
npx sequelize init:models

Criar model com comando
yarn sequelize model:generate --name Task --attributes title:string,desion:string,done:boolean,deleted:boolean
npx sequelize model:generate --name Task --attributes title:string,desion:string,done:boolean,deleted:boolean

Criar seeder com comando
yarn sequelize seeder:generate --name tasks
npx sequelize seeder:generate --name tasks

Executar o seeder para inserir o registro na tabela tasks
yarn sequelize db:seed
npx sequelize db:seed

Alterar o arquivo index removendo variaveis .env, pois, neste projeto não temos .env

criando um model sem comandos do sequelize
module.exports = (sequelize, DataType) => {
	const Task = sequelize.define('Task', {
	    id: {
	      type: DataType.INTEGER,
	      primaryKey: true,
	      autoIncrement: true
	    },
    	    title: DataType.STRING,
	    description: DataType.STRING,
	    done: DataType.BOOLEAN,
	    deleted: DataType.BOOLEAN,
	},{
	   tableName: 'tasks',
	});
	return Task;
};

limit = limita quantidade de registros a serem exibidos 
offset = com base no valor indicado no limit, indica o intervalo de registros exibidos,
se definido como 0 trará informações do registro de ID 1 ao ID 10.

Crio limitador em um layout para exibir 10 registros por página, no caso, se colocarmos um
offset de 0, as informações exibidas serão os registros de ID 1 ao ID 10
Crio limitador em um layout para exibir 10 registros por página, no caso, se colocarmos um
offset de 1, as informações exibidas serão os registros de ID 11 ao ID 20
